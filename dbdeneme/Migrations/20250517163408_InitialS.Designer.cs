// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dbdeneme.Data;

#nullable disable

namespace dbdeneme.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250517163408_InitialS")]
    partial class InitialS
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("dbdeneme.Models.Departman", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Aciklama")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Ad")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("AktifMi")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Departmanlar");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Aciklama = "Yazılım ve sistem altyapıları yönetimi",
                            Ad = "Bilgi Teknolojileri",
                            AktifMi = true
                        },
                        new
                        {
                            Id = 2,
                            Aciklama = "Personel yönetimi ve işe alım süreçleri",
                            Ad = "İnsan Kaynakları",
                            AktifMi = true
                        },
                        new
                        {
                            Id = 3,
                            Aciklama = "Finansal işlemler ve raporlar",
                            Ad = "Muhasebe",
                            AktifMi = true
                        },
                        new
                        {
                            Id = 4,
                            Aciklama = "Satış operasyonları ve müşteri ilişkileri",
                            Ad = "Satış",
                            AktifMi = true
                        },
                        new
                        {
                            Id = 5,
                            Aciklama = "Pazar araştırmaları ve reklam çalışmaları",
                            Ad = "Pazarlama",
                            AktifMi = true
                        },
                        new
                        {
                            Id = 6,
                            Aciklama = "Yeni ürün ve hizmetlerin geliştirilmesi",
                            Ad = "Ar-Ge",
                            AktifMi = true
                        },
                        new
                        {
                            Id = 7,
                            Aciklama = "Ürünlerin üretim süreci ve kalite kontrolü",
                            Ad = "Üretim",
                            AktifMi = true
                        },
                        new
                        {
                            Id = 8,
                            Aciklama = "İdari ve teknik destek sağlama",
                            Ad = "Destek Hizmetleri",
                            AktifMi = true
                        });
                });

            modelBuilder.Entity("dbdeneme.Models.Personel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Ad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DepartmanId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PozisyonId")
                        .HasColumnType("int");

                    b.Property<string>("Soyad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telefon")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmanId");

                    b.HasIndex("PozisyonId");

                    b.ToTable("Personeller");
                });

            modelBuilder.Entity("dbdeneme.Models.Pozisyon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Aciklama")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Ad")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("AktifMi")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Pozisyonlar");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ad = "Yazılım Mühendisi",
                            AktifMi = true
                        },
                        new
                        {
                            Id = 2,
                            Ad = "İK Uzmanı",
                            AktifMi = true
                        },
                        new
                        {
                            Id = 3,
                            Ad = "Muhasebeci",
                            AktifMi = true
                        },
                        new
                        {
                            Id = 4,
                            Ad = "Satış Temsilcisi",
                            AktifMi = true
                        },
                        new
                        {
                            Id = 5,
                            Ad = "Pazarlama Uzmanı",
                            AktifMi = true
                        });
                });

            modelBuilder.Entity("dbdeneme.Models.Personel", b =>
                {
                    b.HasOne("dbdeneme.Models.Departman", "Departman")
                        .WithMany("Personeller")
                        .HasForeignKey("DepartmanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dbdeneme.Models.Pozisyon", "Pozisyon")
                        .WithMany("Personeller")
                        .HasForeignKey("PozisyonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departman");

                    b.Navigation("Pozisyon");
                });

            modelBuilder.Entity("dbdeneme.Models.Departman", b =>
                {
                    b.Navigation("Personeller");
                });

            modelBuilder.Entity("dbdeneme.Models.Pozisyon", b =>
                {
                    b.Navigation("Personeller");
                });
#pragma warning restore 612, 618
        }
    }
}
